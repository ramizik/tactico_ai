---
description: Frontend Component Patterns
alwaysApply: false
---
## üîí Non-Negotiable Rules (Figma Make System)

1. **Frontend-only.** Do **not** implement backend logic, servers, DB, auth, or actual API calls.
2. **No live network calls.** Use **typed mock data** and **stubbed services** only.
3. **TypeScript + React + Vite.** Generate TS React components with strong props typing.
4. **UI kit & styling.** Use **TailwindCSS** + **shadcn/ui** + **Lucide icons**.
5. **Routing.** Use **React Router** for client routes; no server routing.
6. **State.** Use **React Context** for global UI state (theme, session, demo flags).
7. **A11y & DX.** Add ARIA labels, keyboard focus states, and **helpful comments** for devs.
8. **Backend handoff markers.** Where backend will connect, add clear comments:

   ```ts
   // BACKEND_HOOK: describe expected API, payloads, and success/error states
   ```
9. **Testability.** Add `data-testid` attributes to significant elements.
10. **Copy & micro-UX.** Provide sensible labels, empty states, loading skeletons, and error banners.

## üß± Project Overview (Pages & Purpose)

Generate a multi-page React app with these routes and responsibilities:

1. **Landing / Intro** (`/`)
   * Centered CTA ("Get Started") and short value prop.
   * Secondary CTA: "View Demo Matches".
   * **Theme preview** chips (soccer+ college variants).
   * Animated background with gradient overlays.

2. **Selection** (`/selection`)
   * University selection (UOP, UC California) with dynamic theming.
   * Smooth transitions and theme application.

3. **Dashboard** (`/dashboard`)
   * **Recent Matches**: cards with thumbnails, scores, and status badges.
   * **Upcoming Matches**: schedule with dates and opponents.
   * **Performance Widget**: win rate, offense/defense metrics.
   * Real-time data from mock Supabase integration.

4. **Past Games** (`/past-games`)
   * **Match History Table**: date, teams, video links, status badges.
   * **Upload Panel**: drag-drop file ‚Üí show queued "job" with progress bar.
   * **AI Coach Section**: voice coach integration UI.
   * Filters: by sport, opponent, date range (client-only).

5. **My Team** (`/my-team`)
   * **Roster Grid**: FIFA-style player cards with avatars, positions, stats.
   * **Team Stats Summary**: league position, average rating, active players.
   * **Add/Remove Players**: modals for roster management.
   * College/sport theming applied.

6. **Match Detail** (`/match/:id`)
   * **Embedded video player** (use local placeholder mp4).
   * **AI Summary panel** (mock text from JSON).
   * **Formation card** (simple SVG pitch/court visualization).
   * **Metrics grid** (possession, press index, width, compactness).
   * **Events table** (minute, type, player, zone).
   * "Call Voice Coach" (UI modal) + "Download Report" button.

## React Component Structure
- Functional components with TypeScript
- Props interface defined above component
- Destructure props in function signature
- Export component as default at bottom
- **JSDoc comments** explaining purpose and backend hooks
```
/**
 * UploadPanel
 * Renders drag-drop area and mocked queue progression.
 * BACKEND_HOOK:
 *  - Will POST /api/matches with video upload reference (Supabase/Firebase)
 *  - Poll GET /api/jobs/:id for status {queued|running|completed|failed}
 */
interface AnalysisPageProps {
  teamId: string;
  onUploadComplete: (matchId: string) => void;
}

export default function AnalysisPage({ teamId, onUploadComplete }: AnalysisPageProps) {
  // hooks first
  // handlers second
  // render last
}
```

## üß© Data & Mock Services (strictly local)

Create a small **`/src/mocks`** folder with typed fixtures and "fake service" functions:

* `themes.ts`: typed map of colleges & sport themes (colors, logos).
* `user.ts`: mock session object after "login".
* `matches.ts`: sample matches for soccer with statuses.
* `analysis.ts`: per-match **LLM-ready JSON** examples:

  ```ts
  export type Analysis = {
    matchId: string;
    summary: string;
    formation: { team: string; opponent: string; confidence: number };
    metrics: { possessionPct: number; pressIndex: number; widthM: number; compactness: number; shots: number };
    events: { id: string; minute: number; type: 'line_break'|'shot'|'turnover'|'press_trigger'; player?: number; zone?: string }[];
    playerStats: { playerId: string; jersey: number; xfactor?: string; involvements?: number }[];
  }
  ```
* `players.ts`: roster for two demo teams with soccer positions.
* `uploads.ts`: a fake queue API (in-memory) to simulate: `queued ‚Üí processing ‚Üí analyzed` with timeouts.

**All code must compile and run without network connectivity.**

## üé® Theming & Layout Requirements

* **Theme engine** driven by **sport** (soccer) + **college** (UOP, UC California):
  * Colors, logo, accent borders, background textures.
  * Provide **mock theme registry** (TS) keyed by `{ sport, collegeCode }`.
* **Design tokens** via CSS variables (in Tailwind layer).
* **Responsive** (mobile ‚Üí desktop), minimum 320px width; use grid systems for cards.
* **Dynamic theming** that updates instantly on university/sport selection.

### **Theme System**
* Implement dynamic theming based on university + sport selection
* UOP: Orange (#FF671D) + Black (#231F20)
* UC California: Blue (#1295D8) + Gold (#FFB511)
* Soccer: Green accent (#22c55e)

## üßë‚Äçüíª Frontend Development Standards

* **TypeScript first**: Component props & domain types, no `any`
* **Accessibility**: ARIA labels, keyboard focus, `aria-live` for progress
* **UI Components**: shadcn/ui for Cards, Tabs, Dialog, Dropdown, Badge, Progress
* **Styling**: Tailwind utility classes, no inline styles
* **Testing**: Data-testids on key elements (upload, cards, forms, buttons)
* **UX**: Empty states, loading skeletons, error banners
* **Content**: Coach-friendly copy, no lorem ipsum, realistic microcopy
* **Responsive**: Mobile-first design, card stacking, proper tap targets

## Cross-Platform Frontend Standards
* **File upload handling**: Ensure proper file extensions and MIME type validation
* **API integration**: Use robust error handling for network requests across different environments
* **Path handling**: Use relative paths and avoid hardcoded absolute paths
* **Environment variables**: Use Vite's environment variable system for configuration
* **Build optimization**: Ensure builds work consistently across Windows, Mac, and Linux
* **Dependencies**: Pin specific versions in package.json to avoid compatibility issues
* **Chunked upload**: Implement proper chunk naming with extensions (.mp4) for backend compatibility

## üö® CRITICAL: Asset Import Rules (Vite-Specific)
**NEVER use Figma Make asset imports in this Vite project!**

### ‚ùå FORBIDDEN Import Patterns:
```ts
// WRONG - These will break the build!
import logo from 'figma:asset/abc123.png';
import image from 'figma:asset/def456.jpg';
```

### ‚úÖ CORRECT Import Patterns:
```ts
// CORRECT - Use relative paths to assets folder
import logo from '../assets/abc123.png';
import image from '../assets/def456.jpg';
import icon from '../../assets/icons/icon.svg';
```

### üìÅ Asset Organization:
- All images go in `src/assets/` directory
- Use descriptive filenames (not just hashes)
- Support: `.png`, `.jpg`, `.jpeg`, `.svg`, `.webp`
- Import with relative paths: `../assets/` or `../../assets/`

### üîß When Adding New Assets:
1. Place files in `src/assets/` directory
2. Import using relative paths: `import asset from '../assets/filename.ext'`
3. **NEVER** use `figma:asset/` prefix - this is Figma Make specific, not Vite
4. Test that imports work in development mode

### ‚ö†Ô∏è Common Mistakes to Avoid:
- Don't copy Figma Make import syntax
- Don't use absolute paths from project root
- Don't assume asset bundling works like other frameworks
- Always test imports in `npm run dev` before committing

## üß™ Demo-First Interactions (mocked end-to-end)

* **Upload flow:** selecting a file enqueues a **fake job**; show progress ‚Üí then reveal "analysis available".
* **Analysis page:** filters update client-side; clicking a match enters **Match Detail**.
* **Match Detail:** show a playable local video, render summary/metrics/events from mock data; "Download PDF" opens a nice printable view (no real PDF).
* **Voice Coach:** modal with example prompts visually "streaming" responses from mock fixtures (no TTS).

## üè∑Ô∏è Backend Hook Annotations (examples to include in code)

* Landing: none.
* Selection:

  ```ts
  // BACKEND_HOOK (Theme & Team Selection):
  // - Store user's university/sport preference in Supabase
  // - Load team data based on selection
  ```
* Dashboard (Data):

  ```ts
  // BACKEND_HOOK (Dashboard Data):
  // - GET /api/teams/{id}/matches (recent + upcoming)
  // - GET /api/teams/{id}/form (aggregated stats)
  ```
* Past Games (Upload):

  ```ts
  // BACKEND_HOOK (Upload + Job):
  // - Upload video to Supabase Storage
  // - POST /api/matches { teamId, opponent, sport, videoPath }
  // - Poll GET /api/jobs/:jobId for processing status
  ```
* Match Detail (Data):

  ```ts
  // BACKEND_HOOK (Analysis Data):
  // - GET /api/analyses/:matchId ‚Üí summary, metrics, events, playerStats
  // - GET /api/matches/:id ‚Üí video signed URL
  ```
* My Team (Roster):

  ```ts
  // BACKEND_HOOK (Roster CRUD):
  // - GET/POST/DELETE /api/players for this team
  // - Aggregate last 5 matches: GET /api/team/:id/form
  ```

## üß≠ File/Folder Blueprint

Create this structure and populate it:

```
/src
  /components
    /common         // Buttons, Cards, StatChip, Badge, EmptyState, Skeleton, Toast
    /analysis       // UploadPanel, MatchCard, FilterBar, VoiceCoachModal
    /match          // VideoPlayer, FormationCard, MetricsGrid, EventsTable, PlayersTable, DownloadCard
    /team           // RosterGrid, PlayerCard, AddPlayerModal, RemovePlayerModal, TeamFormWidget
    /theming        // ThemeProvider, ThemePreview, Logo
    /navigation     // Navigation, GlobalHeader, SportSwitcher
    /ui             // shadcn/ui components (40+ components)
  /contexts         // ThemeContext, SessionContext
  /hooks            // useTheme, useSession, useUploadQueue, useToasts, useSupabaseData
  /lib              // supabase.ts, api.ts, database.types.ts, utils
  /mocks            // typed fixtures listed above
  /styles           // tailwind.css, globals.css, tokens.css
  /assets           // placeholder videos, logos, icons
  App.tsx
  main.tsx
  index.css
```

* Each component must include **top-of-file JSDoc** explaining what it does and where backend will connect, e.g.:

  ```ts
  /**
   * UploadPanel
   * Renders drag-drop area and mocked queue progression.
   * BACKEND_HOOK:
   *  - Will POST /api/matches with video upload reference (Supabase/Firebase)
   *  - Poll GET /api/jobs/:id for status {queued|running|completed|failed}
   */
  ```

## ‚úÖ Acceptance Criteria

* `npm install && npm run dev` runs the app offline with **no errors**.
* All routes function with **mock data** and **clear UI**.
* Every major component has **JSDoc** + **BACKEND_HOOK** comments.
* Theming updates instantly when selecting college/sport.
* Upload queue simulates status changes to "Analyzed" within ~10s.
* Match Detail shows **video, summary, formation SVG, metrics grid, events table, players table**, and **voice coach modal**.
* Lighthouse a11y score ‚â• 90 on core pages (rough).

## üß∞ Optional niceties (only if time allows)

* Simple **print view** for the match report.
* **Toast system** for success/error messages.
* **LocalStorage** persistence for session + theme.
* Minimal **unit tests** for pure utils (formatting, sorting).